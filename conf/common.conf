######################################################################
##
## Script name : common.conf
## Create      : 2021.10.22 - kjimba
## Update      : 2021.10.25 - kjimba
## Char code   : UTF-8 (Non BOM)
## Output lang : ja-JP.UTF8
##
######################################################################

### Paramters & Variables settings ###################################

## Directory -----------------------------------------------

# Script directory
#pScriptDir=$(echo ${0%/*})
pScriptDir=$(cd $(/usr/bin/dirname ${0}); pwd)

# Configuration directory
pConfDir=${pScriptDir}/conf

# Log output directory
pLogDir=${pScriptDir}/log

# Data output directory
pDatDir=${pScriptDir}/data

## File ----------------------------------------------------

# Script name
pScriptName=$(echo ${0##*/})

# Log
pLogFile=${pScriptName%.*}.log

## Path ----------------------------------------------------

# Configuration file
pConfig=${pConfDir}/${pScriptName%.*}.conf

# Log
pLog=${pLogDir}/${pLogFile}

## Log settings --------------------------------------------

# 通知するログレベルの指定
# レベル名  Lv  メッセージの内容・緊急度
# EMERG     0   システムが利用できなくなった（ぐらい緊急度が高い）
# ALERT     1   早急に対応しなくてはならない
# CRIT      2   緊急状態
# ERR       3   エラー発生状態
# WARNING   4   注意が必要
# NOTICE    5   お知らせ程度
# INFO      6   情報
# DEBUG     7   デバッグメッセージ
pLogNotifyLv=5

# ログ管理 0=通知する
fEnLog=0
fEnLogEmerg=0
fEnLogAlert=0
fEnLogCrit=0
fEnLogErr=0
fEnLogWarn=0
fEnLogNotice=0
fEnLogInfo=0
fEnLogDebug=0

## etc -----------------------------------------------------

# Exit status code
pExitStatus=0

### Functions ########################################################

fnLog() {
  # Script log
  #fnMsg ${*}
  [ "${fEnLog}" -eq "0" ] && echo -e "$(date +'%Y/%m/%d %H:%M:%S') $*" \
                                      >> ${pLog}
}

fnEmerg() {
  [ "${fEnLogEmerg}" -eq "0" ] && fnLog "[Emergency] $*"
}

fnAlert() {
  if [ "${pLogNotifyLv}" -ge "1" ]; then
    [ "${fEnLogAlert}" -eq "0" ] && fnLog "[Alert] $*"
  fi
}

fnCrit() {
  if [ "${pLogNotifyLv}" -ge "2" ]; then
    [ "${fEnLogCrit}" -eq "0" ] && fnLog "[Critical] $*"
  fi
}

fnErr() {
  if [ "${pLogNotifyLv}" -ge "3" ]; then
    [ "${fEnLogErr}" -eq "0" ] && fnLog "[Err] $*"
  fi
}

fnWarn() {
  if [ "${pLogNotifyLv}" -ge "4" ]; then
    [ "${fEnLogWarn}" -eq "0" ] && fnLog "[Warn] $*"
  fi
}

fnNotice() {
  if [ "${pLogNotifyLv}" -ge "5" ]; then
    [ "${fEnLogNotice}" -eq "0" ] && fnLog "[Notice] $*"
  fi
}

fnInfo() {
  if [ "${pLogNotifyLv}" -ge "6" ]; then
    [ "${fEnLogInfo}" -eq "0" ] && fnLog "[Info] $*"
  fi
}

fnDebug() {
  if [ "${pLogNotifyLv}" -ge "7" ]; then
    [ "${fEnLogDebug}" -eq "0" ] && fnLog "[Debug] $*"
  fi
}

fnParam() {
  fnDebug '[Param] $'"$1 = $2"
}

fnMsg() {
  # System log (viewing /var/log/messages)
  /usr/bin/logger -t "${pScriptName}" "$*"

  # Script log
  fnLog "$*"
}

fnEnd() {
  # Option = Exit status (0 to 255)
  pExitStatus=$1

  case ${pExitStatus} in
    0 | "" ) fnInfo "Normal end.";;
     9 ) fnErr "Does not have the correct permission. (${2})";;
    10 ) fnErr "File not exist. (${2})";;
    11 ) fnErr "Permission read not exist. (${2})";;
    12 ) fnErr "Permission write not exist. (${2})";;
    13 ) fnErr "Permission exec not exist. (${2})";;
    14 ) fnErr "File not exist. (${2})";;
    15 ) fnErr "Directory not exist. (${2})";;
    16 ) fnErr "String zero data. (${2})";;
    *  ) fnErr "unknown error. (${2})";;
  esac
  fnMsg "[${pScriptName}] Script end."
  exit "${pExitStatus}"
}

fnChkDir() {
  fnInfo "Function start fnChkDir"
  # String check
  [ -z "${1}" ] && fnEnd 16 "on fnChkDir"

  # Directory check
  if [ -d ${1} ]; then
    fnLog "Exist directory: ${1}"
  else
    fnEnd 15 "${1}"
  fi
  fnInfo "Function end fnChkDir"
}

fnChkCmd() {
  case ${1} in
    "" )
      echo "Option (command) required."
      ;;
    *  )
      type ${1} > /dev/null 2>&1 || return 1
      ;;
  esac
}

### Environment check ################################################

# Directory check
if [ ! -d "${pLogDir}" ]; then
  echo "Not exist log directory (${pLogDir})"
  exit 1
fi
fnMsg "[${pScriptName}] Script start."

fnNotice "[common.conf] Environment directory check."
fnChkDir ${pConfDir}
#fnChkDir ${pLogDir}
fnChkDir ${pDatDir}

fnNotice "[common.conf] Environment check end."
######################################################################
